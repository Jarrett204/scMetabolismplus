library(rsvd)
library(ggplot2)
library(tibble)
library(igraph)
library(Seurat)
library(ggsci)
library(dplyr)
library(tidyr)
library(ggraph)
Singlecell <- readRDS('../AB.rds')
Singlecell2 <- Singlecell
database= "Reactome"
Cancer="KIRC"
phenotype="seurat_clusters"
Singlecell <- readRDS('../AB.rds')
Singlecell <- readRDS('../AB.rds')
Singlecell2 <- Singlecell
database= "Reactome"
Cancer="KIRC"
phenotype="seurat_clusters"
TT <- system.file("data/", paste0(database,"_ALL.csv"), package = "scMetabolismplus")#手动找一下通路
input_pathway=read.csv(TT)%>%dplyr::filter(Cancer_type==Cancer)%>%.$Pathway%>%unique()#加载所有的pathway，方便统一展示
input_pathway
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method = "AUCell",metabolism.type = database,Cancer =Cancer)
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
Cancer="Hallmark"
TT <- system.file("data/", paste0(database,"_ALL.csv"), package = "scMetabolismplus")#手动找一下通路
input_pathway=read.csv(TT)%>%dplyr::filter(Cancer_type==Cancer)%>%.$Pathway%>%unique()#加载所有的pathway，方便统一展示
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
method
method="Reactome"
method
method="Reactome"
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
system.file("extdata/Reactome_path", paste0(Cancer,".gmt"), package = "scMetabolismplus")
system.file("extdata/KEGG_path", paste0(Cancer,".gmt"), package = "scMetabolismplus")
system.file("extdata/Reactome_path", paste0(Cancer,".gmt"), package = "scMetabolismplus")
system.file("extdata/GO_path", paste0(Cancer,".gmt"), package = "scMetabolismplus")
Cancer
Cancer="BRCA"
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
database= "Reactome"
Cancer="BRCA"
phenotype="seurat_clusters"
method="AUCell"
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
#DotPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
tt <- DotPlot.metabolism(kk,pathway=input_pathway,phenotype =phenotype, norm = "y")
#DotPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
tt <- DotPlot.metabolism(kk,pathway=input_pathway,phenotype =phenotype, norm = "y")
TT <- system.file("data/", paste0(database,"_ALL.csv"), package = "scMetabolismplus")#手动找一下通路
input_pathway=read.csv(TT)%>%dplyr::filter(Cancer_type==Cancer)%>%.$Pathway%>%unique()#加载所有的pathway，方便统一展示
input_pathway
TT <- system.file("data/", paste0(database,"_ALL.csv"), package = "scMetabolismplus")#手动找一下通路
input_pathway=read.csv(TT)%>%dplyr::filter(Cancer_type==Cancer)%>%.$Pathway%>%unique()#加载所有的pathway，方便统一展示
input_pathway
#DotPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
tt <- DotPlot.metabolism(kk,pathway=input_pathway,phenotype =phenotype, norm = "y")
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
tt$pathway
Singlecell <- readRDS('../AB.rds')
Singlecell2 <- Singlecell
database= "Reactome"
Cancer="BRCA"
phenotype="seurat_clusters"
method="AUCell"
TT <- system.file("data/", paste0(database,"_ALL.csv"), package = "scMetabolismplus")#手动找一下通路
input_pathway=read.csv(TT)%>%dplyr::filter(Cancer_type==Cancer)%>%.$Pathway%>%unique()#加载所有的pathway，方便统一展示
input_pathway
#单细胞加载#phenotype是用什么metadata比如注释后的结果
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2,imputation=F, method =method,metabolism.type = database,Cancer =Cancer)
#DotPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
tt <- DotPlot.metabolism(kk,pathway=input_pathway,phenotype =phenotype, norm = "y")
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
#通路的UMAP降维图，某个癌的某个算法，结果会出现在同一个文件夹里，附带所有通路评分
PathUmp.metabolism(kk, threshold = 3, top_n = 5,phenotype =phenotype)
tt$pathway
input_pathway
tt$pathway%in%input_pathway
#DimPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
DimPlot.metabolism(kk,pathway=input_pathway,dimention.reduction.run = F)
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
obj=kk
metadata <- obj@meta.data
metadata
metabolism.matrix <- obj@assays$METABOLISM$score
metabolism.matrix
head(metabolism.matrix,c(4,4))
input.parameter <- phenotype
input.parameter
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
input.pathway <- pathway
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
pathway=input_pathway
input.pathway <- pathway
input.parameter <- phenotype
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
metabolism.matrix_sub
pathway =tt$pathway
input.pathway <- pathway
input.parameter <- phenotype
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
metabolism.matrix_sub
# Arrange large table
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table
gg_table <- data.frame(gg_table)
colnames(gg_table) <- c("cluster", "Pathway", "Score")
gg_table$Score <- as.numeric(as.character(gg_table$Score))
print(head(gg_table))
# Combine multiple color palettes manually
colors <- c(pal_jama()(10),pal_npg()(10),pal_jco()(10))
output_dir <- paste0("./", unique(obj@meta.data$Cancer), "_", unique(obj@meta.data$dataset), "Boxplot")
dir.create(output_dir, showWarnings = FALSE)
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
Width=6,Height=4
Width=6;Height=4
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
library(progress)
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
# Initialize progress bar with total steps
total_steps <- length(input.pathway) * 2  # One for creating data, one for plotting
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
plot_box
}
input.pathway
select.pathway
pathway_data <- subset(gg_table, Pathway == select.pathway)
pathway_data
gg_table
gg_table$cluster
unique(gg_table$Pathway)
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
metadata
metabolism.matrix_sub
head(metabolism.matrix_sub)
input.pathway
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table
gg_table
head(gg_table)
head(gg_table)length(input.pathway)
length(input.pathway)
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
# Arrange large table
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table <- data.frame(gg_table)
colnames(gg_table) <- c("cluster", "Pathway", "Score")
gg_table$Score <- as.numeric(as.character(gg_table$Score))
print(head(gg_table))
gg_table$Pathway%>%unique()
input.pathway <- pathway
input.parameter <- phenotype
cat("Start BoxPlot\n\n")
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
# Initialize progress bar with total steps
total_steps <- length(input.pathway) * 2  # One for creating data, one for plotting
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
# Arrange large table
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table <- data.frame(gg_table)
colnames(gg_table) <- c("cluster", "Pathway", "Score")
gg_table$Score <- as.numeric(as.character(gg_table$Score))
print(head(gg_table))
gg_table$Pathway%>%unique()
gg_table
pathway_data <- subset(gg_table, Pathway == select.pathway)
pathway_data
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
plot_box
}
#BoxPlot绘制某个癌的某个算法，结果会出现在同一个文件夹里
BoxPlot.metabolism(obj = kk, pathway =tt$pathway, phenotype =phenotype)
library(wesanderson)
library(RColorBrewer)
library(ggsci)
library(progress)
input.pathway <- pathway
input.parameter <- phenotype
cat("Start BoxPlot\n\n")
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
# Initialize progress bar with total steps
total_steps <- length(input.pathway) * 2  # One for creating data, one for plotting
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
# Arrange large table
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table <- data.frame(gg_table)
colnames(gg_table) <- c("cluster", "Pathway", "Score")
gg_table$Score <- as.numeric(as.character(gg_table$Score))
print(head(gg_table))
# Combine multiple color palettes manually
colors <- c(pal_jama()(10),pal_npg()(10),pal_jco()(10))
output_dir <- paste0("./", unique(obj@meta.data$Cancer), "_", unique(obj@meta.data$dataset), "Boxplot")
dir.create(output_dir, showWarnings = FALSE)
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
plot_box
}
obj = kk;pathway =tt$pathway;phenotype =phenotype
library(wesanderson)
library(RColorBrewer)
library(ggsci)
library(progress)
input.pathway <- pathway
input.parameter <- phenotype
cat("Start BoxPlot\n\n")
metadata <- obj@meta.data
metabolism.matrix <- obj@assays$METABOLISM$score
metadata[,input.parameter] <- as.character(metadata[,input.parameter])
metabolism.matrix_sub <- t(metabolism.matrix[input.pathway,])
# Initialize progress bar with total steps
total_steps <- length(input.pathway) * 2  # One for creating data, one for plotting
pb <- progress_bar$new(
format = "  Processing [:bar] :percent eta: :eta",
total = total_steps, clear = FALSE, width = 60
)
# Arrange large table
gg_table <- c()
input.pathway <- as.character(input.pathway)
for (i in 1:length(input.pathway)){
gg_table <- rbind(gg_table, cbind(metadata[,input.parameter], input.pathway[i], metabolism.matrix_sub[,i]))
pb$tick()  # Update progress bar after data processing
}
gg_table <- data.frame(gg_table)
colnames(gg_table) <- c("cluster", "Pathway", "Score")
gg_table$Score <- as.numeric(as.character(gg_table$Score))
print(head(gg_table))
# Combine multiple color palettes manually
colors <- c(pal_jama()(10),pal_npg()(10),pal_jco()(10))
output_dir <- paste0("./", unique(obj@meta.data$Cancer), "_", unique(obj@meta.data$dataset), "Boxplot")
dir.create(output_dir, showWarnings = FALSE)
for (select.pathway in input.pathway) {
pathway_data <- subset(gg_table, Pathway == select.pathway)
print(head(pathway_data))
stats <- pathway_data %>%
group_by(cluster) %>%
summarise(
ymin = min(Score),
lower = quantile(Score, 0.25),
middle = median(Score),
upper = quantile(Score, 0.75),
ymax = max(Score)
)
print(head(stats))
plot_box <- ggplot(data = pathway_data, aes(x = cluster, y = Score, fill = cluster)) +
geom_boxplot(outlier.shape = NA, alpha = 0.4) +
ylab("Metabolic Pathway") +
xlab("Input Parameter") +
theme_bw() +
ggtitle(paste("Pathway:", select.pathway)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(),
panel.grid.major = element_line()) +
labs(fill = "Input Parameter") +
scale_fill_manual(values = colors)
# Calculate dynamic height based on the number of pathways
ggsave(filename = paste0(output_dir, "/", "plot_", select.pathway, ".png"), plot = plot_box, width = Width, height = Height)
pb$tick()  # Update p rogress bar after plotting
}
plot_box
}
output_dir
select.pathway
devtools::build("D:/NAR/scMetabolismplus/")
devtools::check("D:/NAR/scMetabolismplus/")
usethis::create_package("D:/NAR/scMetabolismplus/")
