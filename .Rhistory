scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width = abs(Correlation)/20)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width =0.5)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width =0.3)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width =0.2)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width =0.1)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation), edge_width =0.01)) +
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.2) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = 7) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.4) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = 7) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.9) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = 7) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = 7) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores*3) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
subgraph_scores
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
subgraph_scores
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes]+1)
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
subgraph_scores
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score
# 计算通路之间的相关性矩阵
cor_matrix <- cor(t(pathway_scores), use = "pairwise.complete.obs")
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Pathway1", "Pathway2", "Correlation")
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- mean_scores[subgraph_nodes]
subgraph_scores
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes]+1)
subgraph_scores
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes]+1)
subgraph_scores
mean_scores[subgraph_nodes]
log(mean_scores[subgraph_nodes])
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes]+1)
subgraph_scores
# 获取子图节点对应的平均得分
subgraph_scores <- mean_scores[subgraph_nodes]
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
subgraph_scores
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
subgraph_scores
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores+10), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
subgraph_scores
subgraph_scores+10
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores+10), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores), size = subgraph_scores*100) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
kk
kk@active.ident
kk@assays$METABOLISM$score
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident=0]
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==0]
# 计算通路之间的相关性矩阵
cor_matrix <- cor(t(pathway_scores), use = "pairwise.complete.obs")
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Pathway1", "Pathway2", "Correlation")
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.4) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 1) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
# 计算通路之间的相关性矩阵
cor_matrix <- cor(t(pathway_scores), use = "pairwise.complete.obs")
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Pathway1", "Pathway2", "Correlation")
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
high_cor <- cor_df %>% filter(abs(Correlation) > 0 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
#devtools::document("D:/NAR/scMetabolismplus/")
#file_path <- system.file("data", "KEGG_metabolism_nc.gmt", package = "scMetabolismplus")
devtools::build("D:/NAR/scMetabolismplus/")
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
#单细胞加载
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2, method = "AUCell",metabolism.type = "KEGG",Cancer = "KIRC")
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
#单细胞加载
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2, method = "AUCell",metabolism.type = "KEGG",Cancer = "KIRC")
Singlecell <- readRDS('../AB.rds')
Singlecell2 <- Singlecell[,1:100]
input_pathway=read.csv('./data/KEGG_path.csv')$Pathway%>%unique()
library(scMetabolismplus)
library("Matrix")
library(Seurat)
library(rsvd)
library(ggplot2)
library(tibble)
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
#单细胞加载
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2, method = "AUCell",metabolism.type = "KEGG",Cancer = "KIRC")
devtools::build("D:/NAR/scMetabolismplus/")
devtools::check("D:/NAR/scMetabolismplus/")
#devtools::install_github("Jarrett204/scMetabolismplus",force = TRUE)
library(scMetabolismplus)
library("Matrix")
library(Seurat)
library(rsvd)
library(ggplot2)
library(tibble)
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
#单细胞加载
kk <- scMetabolismplus::sc.metabolism.Seurat.pathway(Singlecell2, method = "AUCell",metabolism.type = "KEGG",Cancer = "KIRC")
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
pathway_scores
# 计算通路之间的相关性矩阵
cor_matrix <- cor(t(pathway_scores), use = "pairwise.complete.obs")
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Pathway1", "Pathway2", "Correlation")
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
library(igraph)
library(Seurat)
library(dplyr)
library(tidyr)
library(ggraph)
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
# 计算通路之间的相关性矩阵
cor_matrix <- cor(t(pathway_scores), use = "pairwise.complete.obs")
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Pathway1", "Pathway2", "Correlation")
high_cor <- cor_df %>% filter(abs(Correlation) > 0.1 & Pathway1 != Pathway2)
# 构建网络图对象
graph <- graph_from_data_frame(high_cor, directed = FALSE)
# 设置k-core值
k <- 3
k_core <- coreness(graph) >= k
subgraph <- induced_subgraph(graph, k_core)
# 计算每个通路的平均得分
mean_scores <- rowMeans(pathway_scores)
# 提取子图中的节点
subgraph_nodes <- V(subgraph)$name
# 获取子图节点对应的平均得分
subgraph_scores <- log(mean_scores[subgraph_nodes])
# 生成颜色向量
colors <- viridis::viridis(length(subgraph_nodes))
# 绘制网络图
ggraph(subgraph, layout = "fr") +
geom_edge_link(aes(edge_alpha = abs(Correlation)), width = 0.5) +  # 调整线的粗细
geom_node_point(aes(color = subgraph_nodes, size = subgraph_scores)) +  # 调整点的大小
geom_node_text(aes(label = name), repel = TRUE) +
scale_color_manual(values = colors) +
theme_void()
pathway_scores
Seurat
library(Seurat)
pathway_scores.head()
head(pathway_scores)
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
seurat_object <- CreateSeuratObject(counts = pathway_scores)
seurat_object
counts
pathway_scores
seurat_object@meta.data
seurat_path <- CreateSeuratObject(counts = pathway_scores)
seurat_object@meta.data
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]
pathway_scores
class(pathway_scores)
seurat_path <- CreateSeuratObject(counts = pathway_scores)
seurat_path
seurat_path@meta.data
seurat_path@meta.data%>%nrow()
pathway_scores
rownames(pathway_scores)
meta_pathway <- rownames(pathway_scores)
seurat_object <- AddMetaData(object = seurat_object, metadata = meta_pathway)
meta_pathway
rlang::last_trace()
meta_pathway
meta_pathway
meta_pathway
seurat_object
pathway_scores
metadata_df <- data.frame(pathway_id = rownames(pathway_scores))
seurat_object <- AddMetaData(object = seurat_object, metadata = meta_pathway)
seurat_object <- AddMetaData(object = seurat_object, metadata = metadata_df)
metadata_df
seurat_object@meta.data
pathway_scores\
pathway_scoree
pathway_scores
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]%>%.t()
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]%>%t()
pathway_scores
seurat_path
umap(seurat_path)
# 运行UMAP
seurat_path <- RunUMAP(seurat_path)
# 提取通路得分矩阵
pathway_scores <-kk@assays$METABOLISM$score[kk@active.ident==1]%>%t()
seurat_path <- CreateSeuratObject(counts = pathway_scores)
# 运行UMAP
seurat_path <- RunUMAP(seurat_path)
# 标准化数据
seurat_path <- NormalizeData(seurat_path)
# 识别可变基因
seurat_path <- FindVariableFeatures(seurat_path)
# 标准化可变基因数据
seurat_path <- ScaleData(seurat_path)
# 进行PCA降维
seurat_path <- RunPCA(seurat_path, features = VariableFeatures(object = seurat_path))
seurat_path <- CreateSeuratObject(counts = pathway_scores)
# 运行UMAP
seurat_path <- RunUMAP(seurat_path)
# 使用PCA结果进行UMAP降维
seurat_path <- RunUMAP(seurat_path, dims = 1:10)
# 进行PCA降维
seurat_path <- RunPCA(seurat_path, features = VariableFeatures(object = seurat_path))
# 进行UMAP降维，不进行标准化和PCA
seurat_path <- RunUMAP(seurat_path, assay = "RNA")
# 进行UMAP降维，不进行标准化和PCA
seurat_path <- RunUMAP(seurat_path, assay = "RNA")
# 直接进行UMAP降维
seurat_path <- RunUMAP(seurat_path, features = rownames(seurat_path))
rownames(seurat_path)
seurat_path <- RunUMAP(seurat_path, assay = "RNA", features = rownames(seurat_path@assays$RNA@data))
version(Seurat)
versions(Seurat)
seurat_path
seurat_path@assays
seurat_path@assays$RNA
seurat_path@version
# 使用devtools安装指定版本的Seurat
devtools::install_version("Seurat", version = "4.9.0", repos = "http://cran.us.r-project.org")
remotes::install_version("Seurat", "4.4.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
remotes::install_version("Seurat", "4.4.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
# 强制卸载Seurat
remove.packages("Seurat", lib = "D:/Softwares/R-4.3.2/library")
# 检查是否成功删除
if("Seurat" %in% installed.packages()) {
stop("Seurat package is still installed")
}
seurat_path <- CreateSeuratObject(counts = pathway_scores)
library(Seurat)
